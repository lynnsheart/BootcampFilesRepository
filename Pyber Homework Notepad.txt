%matplotlib inline
# Dependencies and Setup
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# File to Load (Remember to change these)
city_data_to_load = "data/city_data.csv"
ride_data_to_load = "data/ride_data.csv"

# Read the City Data
city_df = pd.read_csv("city_data.csv")
ride_df = pd.read_csv("ride_data.csv")

# Combine the data into a single dataset by grouping on city column
combined_data = pd.merge(city_df, ride_df, how="left", on=["city"])

#Display the data table for preview
combined_data.head()

#Display data types to ensure proper formatting
print(combined_data.columns)
print(combined_data.dtypes)

#Correct column formatting for date
combined_data["date"].astype('datetime64')

# Obtain the x and y coordinates for each of the three city 
urban_cities = combined_data[combined_data["type"] == "Urban"]
suburban_cities = combined_data[combined_data["type"] == "Suburban"]
rural_cities = combined_data[combined_data["type"] == "Rural"]

urban_ride_count = urban_cities.groupby(["city"]).count()["ride_id"]
urban_avg_fare= urban_cities.groupby(["city"]).mean()["fare"]
urban_driver_count = urban_cities.groupby(["city"]).mean() ["driver_count"]

suburban_ride_count = suburban_cities.groupby(["city"]).count()["ride_id"]
suburban_avg_fare= suburban_cities.groupby(["city"]).mean()["fare"]
suburban_driver_count = suburban_cities.groupby(["city"]).mean() ["driver_count"]

rural_ride_count = rural_cities.groupby(["city"]).count()["ride_id"]
rural_avg_fare= rural_cities.groupby(["city"]).mean() ["fare"]
rural_driver_count = rural_cities.groupby(["city"]).mean()["driver_count"]

# Build the scatter plots for each city types

plt.scatter(urban_ride_count, 
           urban_avg_fare,
           s=10*urban_driver_count, c="coral",
           edgecolor="black", linewidths=1, marker="o",
           alpha = 0.8, label= "Urban")

plt.scatter(suburban_ride_count, 
           suburban_avg_fare,
           s=10*suburban_driver_count, c="skyblue",
           edgecolor="black", linewidths=1, marker="o",
           alpha = 0.8, label= "Suburban")

plt.scatter(rural_ride_count, 
           rural_avg_fare,
           s=10*rural_driver_count, c="gold",
           edgecolor="black", linewidths=1, marker="o",
           alpha = 0.8, label= "Rural")

# Incorporate the other graph properties
plt.title("Pyber Ride Sharing Data 2016")
plt.xlabel("Average Fare ($)")
plt.ylabel("Total Number of Rides (Per City)")

# Create a legend

lgnd = plt.legend(fontsize="small", mode = "Expanded",
                 numpoints = 1, scatterpoints=1, loc = "best",
                 title = "City Types", labelspacing=0.5)
lgnd.legendHandles[0]._sizes = [30]
lgnd.legendHandles[1]._sizes = [30]
lgnd.legendHandles[2]._sizes = [30]

# Incorporate a text label regarding circle size
plt.text(42,35, "Note:\nCircle size correlates with driver count per city.")

# Save Figure
#plt.savfig("data/city_ride.png")

#Shot plot
plt.show()

-------------------------
Total Fares by City Type

# Calculate Type Percents
type_percents = 100 *combined_data.groupby(["type"]).sum()["fare"]/combined_data["fare"].sum()

# Build Pie Chart
plt.pie(type_percents, 
       labels=["Rural", "Suburban", "Urban"],
       colors=["gold", "lightskyblue", "lightcoral"],
       explode=[0,0,0.1],
       autopct='%1.1f%%',
       shadow=True, startangle=150)
plt.title("% of Total Fares by City Type")

# Save Figure

# Show Figure
plt.show()

----------------------------------------
Total Rides by City Type

# Calculate Type Percents
ride_percents = 100 *combined_data.groupby(["type"]).sum()["ride_id"]/combined_data["ride_id"].sum()

# Build Pie Chart
plt.pie(ride_percents, 
       labels=["Rural", "Suburban", "Urban"],
       colors=["gold", "lightskyblue", "lightcoral"],
       explode=[0,0,0.1],
       autopct='%1.1f%%',
       shadow=True, startangle=150)
plt.title("% of Total Rides by City Type")

# Save Figure

# Show Figure
plt.show()

------------------------------------------
Total Drivers by City Type

# Calculate Type Percents
driver_percents = 100 *combined_data.groupby(["type"]).sum()["driver_count"]/combined_data["driver_count"].sum()

# Build Pie Chart
plt.pie(driver_percents, 
       labels=["Rural", "Suburban", "Urban"],
       colors=["gold", "lightskyblue", "lightcoral"],
       explode=[0,0,0.1],
       autopct='%1.1f%%', pctdistance=0.70,
       shadow=True, startangle=165)
plt.title("% of Total Drivers by City Type")

# Save Figure

# Show Figure
plt.show()
